ransha
Ran Shaham (203781000)
EX: 2

FILES:
README		-- This file
uthreads.cpp	-- My implementation of the uthreads library.
uthread.h	-- A class definition of a uthread object.
uthread.cpp	-- The uthread class implementation. 
Makefile 	-- a makefile that creates the library (make with no arguments,
 		   or 'all')

__Part_1_Notes__

* In every library function, I blocked the SIGVTALRM signal to prevent
  messing up the threads data structures and scheduling
* I reset the timer in every context switch. This increases overhead but
  prevents getting a signal while in the handler (which will be blocked) and
  then handling it in the next thread's run, which is a buggy behavior.
* Some macros are defined in the class definition ("uthread.h") instead of the
  library implementation ("uthreads.cpp") because they are needed in both the
  class and the library implementation.
* I wrote several helper functions in the beginning of the uthreads.cpp file.
  I tried to use informative names so sometimes I used comments to explain
  and sometimes I didn't, hopefully it's readable enough.

__Part_2_Answers__

_q_1_

The advantages of creating multiple processes instead of kernel-level
threads (for web-browser tabs) are:
* If one tab crashes it crashes its process, which runs only that tab.
  If threads were used instead, all tabs were affected by one tab's crash
  since they share the same process. There are some solutions for that
  (try..catch for example) but they're more expensive to run.
* Each process gets its share of resources from the OS. On the other hand,
  threads share their process resources. When each tab gets a process there
  is no race for resources between tabs (and it also save mutual exclusions
  headaches a bit).

Some disadvantages:
* As seen in class, the context switch between processes is much more expensive
  than between threads since there is more data to handle (PCB has more data).
  So if we want several pages (tabs) to run concurrently for some reason, more
  time will be spent on context switching than in kernel-threads method
  (bigger overhead).
* I'm not a web-browser developer, but I guess tabs need to sometimes interact
  with each-other (e.g. the main browser process needs to know the name of
  the sites each tab runs to display the tab title, or needs to tell a tab
  we're not currently in to stop). Communication between processes, as seen
  in lectures and TAs, is more complicated than threads communication, since
  threads share resources and process usually don't.

_q_2_
When I type in the command and press the return key, the system call 
'execve' is made, thus giving control to the OS to carry the operation -
it starts a process (loads memory and starts executing the instructions).
The program kill starts running and does a lot of file and memory operations
which I can't (and don't think I should) understand.
After that the system call 'kill' is made with the program's pid (the one I
typed in the shell) as argument and the signal SIGTERM - which means the 
terminate signal is sent to the process I typed.
The process that got the signal then takes control and handles the signal.
After that, the stdout and stderr fds were closed (fd: 1,2) and the sys call
exit_group was made with the argument 0, which means the process exitted with
exit status 0 (no error).
exit_group, according to the man pages, is the same as exit except it
terminates all threads in the process and not only the calling one.
After that, the shell (and os) is in control again.

_q_3_
Real time, as suggested by its name, counts the real time that has passed.
Virtual time, on the other hand, counts the time that has passed while 
executing the process - i.e it does not include the time that passed if the
OS switched to another process and ran it.
Thus it is clear that for each process that counts time: 
virtual_time <= real_time.
For example, if we want to write a program that tests reaction times of human
beings to a visual stimulus we should use 'Real time', since we want to
measure the real time that passed between displaying the stimulus and the
reaction. We don't care if during that time 30 other processes ran.
A good example for using virtual time is the current exercise - we want each
thread to get the same amount of time running code, and avoid 'unlucky' threads
that the os ran other processes on their share of run-time.

_q_4_
a. The child process, created by fork(), is a duplicate of the parent - i.e
   they have the same stack and heap data. It is important to note that they
   don't SHARE that data, the parent memory is copied to the child process' 
   memory block (after reading about it, I noticed it is copied only when one
   of the processes tries to access it). This is true for all the memory
   of the process - the stack, heap and global variables.
   tl;dr - The values are the same, they do not share it.
b. pipe is a method of communication between processes. When using the posix
   system function pipe, it sets two file descriptors for reading and writing
   to the pipe. When processes share those fds, they can then communicate
   through it - one writes to the write fd, the other reads from the read fd.
   It is needed because processes do not share memory blocks, so they cannot
   communicate directly. This is an elegant way for them to communicate,
   it is like using files, just without the files.
